#pragma once
#include <array>
#include <cstdint>
#include <stdint.h>
#include <vector>
#include <windows.h>

typedef uint8_t *KO_MEM_ADR;
typedef uint32_t KO_MEM_SIZE;
typedef uint8_t KO_MEM_BYTE;


/**
 * @brief KO_BYTE_PATTERNS contains byte patterns for various elements such as skills from Knight Online Client.
 */
struct KO_BYTE_PATTERNS{
  // Constants
  // -------------------------------
  const static uint8_t KO_STRING_LENGTH_IN_BYTES = 40;

  // Skill Patterns
  // -------------------------------
  // Skill patterns consistently yield two distinct addressesâ€”-one for humans and another for karus. This means that skills and other elements have nations.
  // The determination of which corresponds to each nation occurs during the examination of the nation offset.
  // The nation identification result must manifest as Karus: 62 or Human: 38.
  // It's important to note that these values are universal across all skills and require no modification for other skill sets.

  const static KO_MEM_BYTE skill_nation_human = 62;
  const static KO_MEM_BYTE skill_nation_karus = 38;

  // It seems that Karus is always the first address that is found when searching. 
  KO_MEM_BYTE skill_nation_identification_offset_from_pattern = 0x78; // When added to the address, it points to the nation of the skill. 
  KO_MEM_BYTE skill_cooldown_offset_from_pattern              = 0x9C; // When added to the address, it point to the cooldown of the skill. 

  // Tested
  // Raw: 53 70 69 6B 65 00 69 63 20 74 6F 75 63 68 00 00 05 00 00 00 0F 00 00 00 53 70 69 6B 65 00 69 63 20 74 6F 75 63 68 00 72
  KO_MEM_BYTE spike_byte_pattern[KO_STRING_LENGTH_IN_BYTES]     = {0x53, 0x70, 0x69, 0x6B, 0x65, 0x00, 0x69, 0x63, 0x20, 0x74, 0x6F, 0x75, 0x63, 0x68, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x53, 0x70, 0x69, 0x6B, 0x65, 0x00, 0x69, 0x63, 0x20, 0x74, 0x6F, 0x75, 0x63, 0x68, 0x00, 0x72};
  
  // Tested
  // Raw: 54 68 72 75 73 74 00 6E 00 69 6E 00 3F 3F 3F 00 06 00 00 00 0F 00 00 00 74 68 72 75 73 74 20 00 00 69 6E 00 6E 74 65 72
  KO_MEM_BYTE thrust_byte_pattern[KO_STRING_LENGTH_IN_BYTES]    = {0x54, 0x68, 0x72, 0x75, 0x73, 0x74, 0x00, 0x6E, 0x00, 0x69, 0x6E, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x74, 0x68, 0x72, 0x75, 0x73, 0x74, 0x20, 0x00, 0x00, 0x69, 0x6E, 0x00, 0x6E, 0x74, 0x65, 0x72};
  
  // Tested 
  // Raw: 50 69 65 72 63 65 00 72 61 69 6E 00 3F 3F 3F 00 06 00 00 00 0F 00 00 00 50 69 65 72 63 65 00 72 61 69 6E 00 6E 74 65 72
  KO_MEM_BYTE priece_byte_pattern[KO_STRING_LENGTH_IN_BYTES]    = {0x50, 0x69, 0x65, 0x72, 0x63, 0x65, 0x00, 0x72, 0x61, 0x69, 0x6E, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x50, 0x69, 0x65, 0x72, 0x63, 0x65, 0x00, 0x72, 0x61, 0x69, 0x6E, 0x00, 0x6E, 0x74, 0x65, 0x72};
 
  // Tested
  // Raw: 43 75 74 00 73 74 00 6E 00 69 6E 00 3F 3F 3F 00 03 00 00 00 0F 00 00 00 43 75 74 00 73 74 20 00 00 69 6E 00 6E 74 65 72
  KO_MEM_BYTE cut_byte_pattern[KO_STRING_LENGTH_IN_BYTES]       = {0x43, 0x75, 0x74, 0x00, 0x73, 0x74, 0x00, 0x6E, 0x00, 0x69, 0x6E, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x43, 0x75, 0x74, 0x00, 0x73, 0x74, 0x20, 0x00, 0x00, 0x69, 0x6E, 0x00, 0x6E, 0x74, 0x65, 0x72};
  
  // Tested
  // Raw: 73 68 6F 63 6B 00 00 72 61 69 6E 00 3F 3F 3F 00 05 00 00 00 0F 00 00 00 73 68 6F 63 6B 00 00 72 61 69 6E 00 6E 74 65 72
  KO_MEM_BYTE shock_byte_pattern[KO_STRING_LENGTH_IN_BYTES]     = {0x73, 0x68, 0x6F, 0x63, 0x6B, 0x00, 0x00, 0x72, 0x61, 0x69, 0x6E, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x05, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x73, 0x68, 0x6F, 0x63, 0x6B, 0x00, 0x00, 0x72, 0x61, 0x69, 0x6E, 0x00, 0x6E, 0x74, 0x65, 0x72};
 
  // Tested
  // Raw: 4A 61 62 00 3F 00 20 3F 3F 3F 3F 3F 3F 3F 3F 00 03 00 00 00 0F 00 00 00 4A 61 62 00 74 75 6D 5D 20 43 6F 75 6E 74 65 72
  KO_MEM_BYTE jab_byte_pattern[KO_STRING_LENGTH_IN_BYTES]       = {0x4A, 0x61, 0x62, 0x00, 0x3F, 0x00, 0x20, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x4A, 0x61, 0x62, 0x00, 0x74, 0x75, 0x6D, 0x5D, 0x20, 0x43, 0x6F, 0x75, 0x6E, 0x74, 0x65, 0x72};
  
  // Tested
  // Raw: 73 74 61 62 00 72 79 00 6B 69 6E 00 00 00 00 66 04 00 00 00 0F 00 00 00 53 74 61 62 32 00 79 00 6B 69 6E 00 00 00 69 6E
  KO_MEM_BYTE stab2_byte_pattern[KO_STRING_LENGTH_IN_BYTES]     = {0x73, 0x74, 0x61, 0x62, 0x00, 0x72, 0x79, 0x00, 0x6B, 0x69, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x66, 0x04, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x53, 0x74, 0x61, 0x62, 0x32, 0x00, 0x79, 0x00, 0x6B, 0x69, 0x6E, 0x00, 0x00, 0x00, 0x69, 0x6E};
  
  // Tested
  // Raw: 73 74 61 62 00 72 79 00 6B 69 6E 00 00 00 00 66 04 00 00 00 0F 00 00 00 53 74 61 62 00 72 79 00 6B 69 6E 00 00 00 69 6E
  KO_MEM_BYTE stab_byte_pattern[KO_STRING_LENGTH_IN_BYTES]      = {0x73, 0x74, 0x61, 0x62, 0x00, 0x72, 0x79, 0x00, 0x6B, 0x69, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x66, 0x04, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x53, 0x74, 0x61, 0x62, 0x00, 0x72, 0x79, 0x00, 0x6B, 0x69, 0x6E, 0x00, 0x00, 0x00, 0x69, 0x6E};
  
  // Tested
  // Raw: 73 74 72 6F 6B 65 00 73 6B 69 6E 00 00 00 00 66 06 00 00 00 0F 00 00 00 73 74 72 6F 6B 65 00 73 6B 69 6E 00 00 00 69 6E
  KO_MEM_BYTE stroke_byte_pattern[KO_STRING_LENGTH_IN_BYTES]    = {0x73, 0x74, 0x72, 0x6F, 0x6B, 0x65, 0x00, 0x73, 0x6B, 0x69, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x73, 0x74, 0x72, 0x6F, 0x6B, 0x65, 0x00, 0x73, 0x6B, 0x69, 0x6E, 0x00, 0x00, 0x00, 0x69, 0x6E};
  
  //Tested
  // Raw: 56 61 6D 70 69 72 69 63 20 74 6F 75 63 68 00 00 0E 00 00 00 0F 00 00 00 56 61 6D 70 69 72 69 63 20 74 6F 75 63 68 00 72 
  KO_MEM_BYTE vampiric_byte_pattern[KO_STRING_LENGTH_IN_BYTES]  = {0x56, 0x61, 0x6D, 0x70, 0x69, 0x72, 0x69, 0x63, 0x20, 0x74, 0x6F, 0x75, 0x63, 0x68, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x56, 0x61, 0x6D, 0x70, 0x69, 0x72, 0x69, 0x63, 0x20, 0x74, 0x6F, 0x75, 0x63, 0x68, 0x00, 0x72};
  
  // Tested
  // Raw: 42 6C 6F 6F 64 20 64 72 61 69 6E 00 3F 3F 3F 00 0B 00 00 00 0F 00 00 00 42 6C 6F 6F 64 20 64 72 61 69 6E 00 6E 74 65 72
  KO_MEM_BYTE blood_byte_pattern[KO_STRING_LENGTH_IN_BYTES]     = {0x42, 0x6C, 0x6F, 0x6F, 0x64, 0x20, 0x64, 0x72, 0x61, 0x69, 0x6E, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x42, 0x6C, 0x6F, 0x6F, 0x64, 0x20, 0x64, 0x72, 0x61, 0x69, 0x6E, 0x00, 0x6E, 0x74, 0x65, 0x72};

  // Character Patterns
  // -------------------------------
  // This byte pattern signifies the player's nation.
  // The expected outcome is either Human: 69 or Karus: 75.
  static const KO_MEM_BYTE player_nation_human = 69;
  static const KO_MEM_BYTE player_nation_karus = 75;

  // Tested 
  // Raw: 54 65 78 74 5F 4E 61 74 69 6F 6E 00 00 00 00 00 0B 00 00 00 0F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  KO_MEM_BYTE player_nation_identification_byte_pattern[KO_STRING_LENGTH_IN_BYTES] = {0x54, 0x65, 0x78, 0x74, 0x5F, 0x4E, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  KO_MEM_BYTE player_nation_identification_offset_from_pattern                     = 0xC4; 

 // Mana and HP is incoming. (Currently, there is nothing that I can anchor. Still investigating.)
 // Raw: 3C 00 00 00 05 00 00 00 5A 00 00 00 2C 00 00 00 ED 00 00 00 77 00 00 00 32 00 00 00 00 00 00 00 32
 // Still wrong.
 KO_MEM_BYTE mana_hp_anchor_byte_pattern[33] = {0x3C, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0xED, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32};
 int8_t max_mana_offset_from_pattern = -38;
 int8_t current_mana_offset_from_pattern = -34;

 int16_t current_hp_offset_from_pattern = -0x50C;
 int16_t max_hp_offset_from_pattern = -510;

};
